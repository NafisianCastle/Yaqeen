// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Yaqeen.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Yaqeen.API.Models.CustomUserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomUserTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DueDate = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsCompleted = false,
                            Title = "Read Islamic book 10 mins",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            DueDate = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsCompleted = false,
                            Title = "Volunteer at mosque",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Yaqeen.API.Models.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PointCost")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Badge for completing beginner level",
                            IsActive = true,
                            Name = "Beginner Badge",
                            PointCost = 100,
                            Type = "Virtual"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Digital tasbeeh counter",
                            IsActive = true,
                            Name = "Tasbeeh Counter",
                            PointCost = 200,
                            Type = "Physical"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Unlock Intermediate Level",
                            IsActive = true,
                            Name = "Intermediate Access",
                            PointCost = 100,
                            Type = "Virtual"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Unlock Advanced Level",
                            IsActive = true,
                            Name = "Advanced Access",
                            PointCost = 250,
                            Type = "Virtual"
                        });
                });

            modelBuilder.Entity("Yaqeen.API.Models.TaskLevel", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.HasKey("TaskId", "Level");

                    b.ToTable("TaskLevels");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            Level = "Beginner"
                        },
                        new
                        {
                            TaskId = 2,
                            Level = "Beginner"
                        },
                        new
                        {
                            TaskId = 3,
                            Level = "Beginner"
                        },
                        new
                        {
                            TaskId = 4,
                            Level = "Intermediate"
                        },
                        new
                        {
                            TaskId = 5,
                            Level = "Advanced"
                        },
                        new
                        {
                            TaskId = 6,
                            Level = "Intermediate"
                        });
                });

            modelBuilder.Entity("Yaqeen.API.Models.TaskSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("TaskSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Every day after any prayer",
                            Name = "Daily"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tasks to do after Fajr",
                            Name = "After Fajr"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Tasks to do after Maghrib",
                            Name = "After Maghrib"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Once every week",
                            Name = "Weekly"
                        });
                });

            modelBuilder.Entity("Yaqeen.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PointsBalance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentLevel = "Beginner",
                            Email = "beginner@example.com",
                            FullName = "Beginner User",
                            GoogleId = "g_beg_1",
                            PointsBalance = 20
                        },
                        new
                        {
                            Id = 2,
                            CurrentLevel = "Intermediate",
                            Email = "intermediate@example.com",
                            FullName = "Intermediate User",
                            GoogleId = "g_int_1",
                            PointsBalance = 120
                        },
                        new
                        {
                            Id = 3,
                            CurrentLevel = "Advanced",
                            Email = "advanced@example.com",
                            FullName = "Advanced User",
                            GoogleId = "g_adv_1",
                            PointsBalance = 280
                        });
                });

            modelBuilder.Entity("Yaqeen.API.Models.UserProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PointsAwarded")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompletionDate = new DateTime(2025, 7, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            PointsAwarded = 10,
                            TaskId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Yaqeen.API.Models.UserRewardRedemption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RewardId")
                        .HasColumnType("integer");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRewardRedemptions");
                });

            modelBuilder.Entity("Yaqeen.API.Models.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentReference")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("TaskScheduleId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("TaskScheduleId");

                    b.ToTable("UserTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "Checklist",
                            Description = "Complete all 5 daily prayers",
                            TaskScheduleId = 1,
                            Title = "Pray 5 Times Salah"
                        },
                        new
                        {
                            Id = 2,
                            ContentReference = "DuaFajr1",
                            ContentType = "Dua",
                            Description = "Daily Masnun dua after Fajr",
                            TaskScheduleId = 2,
                            Title = "Recite Dua After Fajr"
                        },
                        new
                        {
                            Id = 3,
                            ContentReference = "DuaMaghrib1",
                            ContentType = "Dua",
                            Description = "Daily Masnun dua after Maghrib",
                            TaskScheduleId = 3,
                            Title = "Recite Dua After Maghrib"
                        },
                        new
                        {
                            Id = 4,
                            ContentReference = "Yasin",
                            ContentType = "Surah",
                            Description = "Weekly Surah Yasin recitation",
                            TaskScheduleId = 4,
                            Title = "Recite Surah Yasin"
                        },
                        new
                        {
                            Id = 5,
                            ContentReference = "Mulk",
                            ContentType = "Surah",
                            Description = "Night recitation of Surah Mulk",
                            TaskScheduleId = 3,
                            Title = "Recite Surah Mulk"
                        },
                        new
                        {
                            Id = 6,
                            ContentReference = "Ikhlas,Falaq,Nas",
                            ContentType = "Surah",
                            Description = "Morning and evening protection",
                            TaskScheduleId = 1,
                            Title = "Recite 3 Quls"
                        });
                });

            modelBuilder.Entity("Yaqeen.API.Models.CustomUserTask", b =>
                {
                    b.HasOne("Yaqeen.API.Models.User", "User")
                        .WithMany("CustomUserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yaqeen.API.Models.TaskLevel", b =>
                {
                    b.HasOne("Yaqeen.API.Models.UserTask", "Task")
                        .WithMany("TaskLevels")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Yaqeen.API.Models.UserProgress", b =>
                {
                    b.HasOne("Yaqeen.API.Models.UserTask", "Task")
                        .WithMany("UserProgresses")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yaqeen.API.Models.User", "User")
                        .WithMany("UserProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yaqeen.API.Models.UserRewardRedemption", b =>
                {
                    b.HasOne("Yaqeen.API.Models.Reward", "Reward")
                        .WithMany("Redemptions")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yaqeen.API.Models.User", "User")
                        .WithMany("RewardRedemptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yaqeen.API.Models.UserTask", b =>
                {
                    b.HasOne("Yaqeen.API.Models.TaskSchedule", "TaskSchedule")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskScheduleId");

                    b.Navigation("TaskSchedule");
                });

            modelBuilder.Entity("Yaqeen.API.Models.Reward", b =>
                {
                    b.Navigation("Redemptions");
                });

            modelBuilder.Entity("Yaqeen.API.Models.TaskSchedule", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Yaqeen.API.Models.User", b =>
                {
                    b.Navigation("CustomUserTasks");

                    b.Navigation("RewardRedemptions");

                    b.Navigation("UserProgresses");
                });

            modelBuilder.Entity("Yaqeen.API.Models.UserTask", b =>
                {
                    b.Navigation("TaskLevels");

                    b.Navigation("UserProgresses");
                });
#pragma warning restore 612, 618
        }
    }
}
